// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_aws_cognito_access_iotcore_mqtt/test/src/data/repositories/aws_service_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_aws_cognito_access_iotcore_mqtt/src/data/aws_sign_service.dart'
    as _i3;
import 'package:flutter_aws_cognito_access_iotcore_mqtt/src/data/data_sources/remote_aws_data_source.dart'
    as _i4;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAwsSignService_1 extends _i1.SmartFake
    implements _i3.AwsSignService {
  _FakeAwsSignService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteAwsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteAwsDataSource extends _i1.Mock
    implements _i4.RemoteAwsDataSource {
  MockRemoteAwsDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.Client);

  @override
  _i3.AwsSignService get awsSignService => (super.noSuchMethod(
        Invocation.getter(#awsSignService),
        returnValue: _FakeAwsSignService_1(
          this,
          Invocation.getter(#awsSignService),
        ),
      ) as _i3.AwsSignService);

  @override
  _i5.Future<bool> attachPolicy({
    required String? accessKey,
    required String? secretKey,
    required String? sessionToken,
    required String? identityId,
    required String? region,
    required String? policyName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #attachPolicy,
          [],
          {
            #accessKey: accessKey,
            #secretKey: secretKey,
            #sessionToken: sessionToken,
            #identityId: identityId,
            #region: region,
            #policyName: policyName,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
